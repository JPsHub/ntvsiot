<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">14.0</VisualStudioVersion>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    <NodechUWPSDKPath Condition="'$(NodechUWPSDKPath)' == ''">$(ProgramFiles)\NodejsUWP</NodechUWPSDKPath>
  </PropertyGroup>
  
   <!-- Reference C++ runtime for UWP wrapper -->
  <ItemGroup>
    <SDKReference Include="Microsoft.VCLibs, Version=14.0" />
  </ItemGroup>

  <!-- Import UWP related properties -->
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.WindowsSDK.props"/>

  <!-- Added to stop build process from copying .NET redist binaries to the bin folder -->
  <PropertyGroup>
    <TargetRuntime>none</TargetRuntime>
  </PropertyGroup>

  <!-- Normal install environment, use the current version -->
  <PropertyGroup>
    <ProjectHome Condition="'$(ProjectHome)' == ''">.</ProjectHome>
    <OutputPath>bin\</OutputPath>
  </PropertyGroup>

  <!-- startupinfo.xml is used to pass Node/Script arguments from VS to remote device -->
  <Target Name="CreateStartupInfoXml" BeforeTargets="CoreCompile">
    <WriteLinesToFile File="$(OutputPath)startupinfo.xml" Lines="." Overwrite="true"/>
  </Target>

  <!-- Include uwp.node to project when building to allow access to UWP namespaces -->
  <Target Name="CopyUWPAddon" BeforeTargets="CoreCompile">
    <Copy SourceFiles="$(NodechUWPSDKPath)\$(Platform)\uwp.node" DestinationFolder="$(ProjectHome)\node_modules" OverwriteReadOnlyFiles="true"/>
  </Target>

  <ItemGroup>
    <NodeModulesContentDir Include="$(ProjectHome)\node_modules"/>
  </ItemGroup>
  
  <ItemGroup>
    <NodeTestsDir Include="$(ProjectHome)\test"/>
  </ItemGroup>

  <ItemGroup>
    <NodeHostFiles Include="$(NodechUWPSDKPath)\$(Platform)\*.dll"/>
  </ItemGroup>

  <ItemGroup>
    <NodeHostFiles Include="$(OutputPath)startupinfo.xml"/>
    <NodeHostFiles Include="$(ProgramFiles)\Microsoft Visual Studio 14.0\VC\redist\onecore\$(Platform)\Microsoft.VC140.CRT\*"/>
  </ItemGroup>

  <PropertyGroup>
    <IncludeCustomOutputGroupForPackaging>true</IncludeCustomOutputGroupForPackaging>
  </PropertyGroup>

  <Target Name="CustomOutputGroupForPackaging" Returns="@(CustomOutputGroupForPackagingOutput)">
    <AssignTargetPath Files="@(NodeHostFiles->'%(FullPath)')" RootFolder="$(OutputPath)">
      <Output TaskParameter="AssignedFiles" ItemName="CustomOutputGroupForPackagingOutput" />
    </AssignTargetPath>
    <AssignTargetPath Files="@(Compile->'%(FullPath)')" RootFolder="$(OutputPath)">
      <Output TaskParameter="AssignedFiles" ItemName="CustomOutputGroupForPackagingOutput" />
    </AssignTargetPath>
    <AssignTargetPath Files="@(NodeModulesContentDir->'%(FullPath)')" RootFolder="@(NodeModulesContentDir)" Condition="Exists(@(NodeModulesContentDir))">
      <Output TaskParameter="AssignedFiles" ItemName="CustomOutputGroupForPackagingOutput" />
    </AssignTargetPath>
    <AssignTargetPath Files="@(NodeTestsDir->'%(FullPath)')" RootFolder="@(NodeTestsDir)" Condition="Exists(@(NodeTestsDir))">
      <Output TaskParameter="AssignedFiles" ItemName="CustomOutputGroupForPackagingOutput" />
    </AssignTargetPath>
  </Target>

  <Import Project="Microsoft.NodejsTools.targets"/>

  <PropertyGroup>
    <QualifiedProjectHome>$([System.IO.Path]::GetFullPath($([System.IO.Path]::Combine($(MSBuildProjectDirectory), $(ProjectHome)))))</QualifiedProjectHome>
    <QualifiedProjectHome Condition="!HasTrailingSlash('$(QualifiedProjectHome)')">$(QualifiedProjectHome)\</QualifiedProjectHome>
  </PropertyGroup>

  <PropertyGroup>
    <BuiltProjectOutputGroupDependsOn>
      BuiltProjectOutputGroupFast;
      $(BuiltProjectOutputGroupDependsOn)
    </BuiltProjectOutputGroupDependsOn>
  </PropertyGroup>

  <!-- Enables incremental build -->
  <Target Name="BuiltProjectOutputGroupFast"
          Returns="@(BuiltProjectOutputGroupFastOutput)"
          DependsOnTargets="$(BuiltProjectOutputGroupFastDependsOn)">
    <ItemGroup>
      <BuiltProjectOutputGroupFastOutput Remove="@(BuiltProjectOutputGroupFastOutput)" />
      <_BuiltProjectOutputGroupFastOutput Remove="@(_BuiltProjectOutputGroupFastOutput)" />
    </ItemGroup>

    <AssignTargetPath RootFolder="$(QualifiedProjectHome)" Files="$(AppxPackageRecipe)">
      <Output TaskParameter="AssignedFiles" ItemName="_BuiltProjectOutputGroupFastOutput" />
    </AssignTargetPath>

    <ItemGroup>
      <BuiltProjectOutputGroupFastOutput Include="@(_BuiltProjectOutputGroupFastOutput->'%(FullPath)')" />
    </ItemGroup>
  </Target>

  <Target Name="BuiltProjectOutputGroup"
          Returns="@(BuiltProjectOutputGroupOutput)"
          DependsOnTargets="$(BuiltProjectOutputGroupDependsOn)">
    <ItemGroup>
      <BuiltProjectOutputGroupOutput Remove="@(BuiltProjectOutputGroupOutput)" />
      <BuiltProjectOutputGroupOutput Include="@(BuiltProjectOutputGroupFastOutput)" />
    </ItemGroup>
  </Target>

</Project>